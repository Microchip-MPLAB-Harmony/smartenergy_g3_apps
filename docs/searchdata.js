var SearchFiles = ["GUID-E7088925-2B61-4F0B-A288-229317BC6841.html",
							"GUID-E87515D0-BD4F-4456-8D21-13BD460238A8.html","GUID-CB22CEE4-8CC0-4FE4-BE82-CAFC9A5F41E2.html","GUID-7776C4FC-5833-4CB1-9BAF-C01556DDBFCE.html","GUID-70689C32-0169-48F9-804C-90A895A3902E.html","GUID-E0EBAD62-17FF-4DD7-8C0D-FD842C97ACED.html","GUID-DE964FB2-4D50-4330-8A62-08DDE4711A8E.html","GUID-7309C013-31A6-4049-BC95-7429CEB65293.html","GUID-F7A45B4F-41B2-4AF9-84AA-839C4328E4A8.html","GUID-629FBCB3-9AE6-41A9-904E-39EBF5C9A78F.html","GUID-797B03B4-18BA-444D-AD79-F6A9ED96F135.html","GUID-164E74E8-F80C-4DF8-942D-84BD75FABE39.html","GUID-0884B0D5-3059-4568-A878-E50D175DB793.html","GUID-0973656C-744C-4DCB-8AEC-904467924B0E.html","GUID-C83E176C-3065-42B7-855C-EC8963BF9A69.html","GUID-FD58C615-4207-42F6-BAA1-5236F2A8E0AF.html","GUID-E8D21C65-D545-4625-B32C-B6355F23BF83.html","GUID-AEF828B2-7BEE-47DA-84FC-8959348255B2.html","GUID-F02BF4EF-116F-45B7-A7E6-5EC5DB7CCC5A.html","GUID-5E7A7DCA-3FEA-478B-A44A-AB99E847B6A1.html","GUID-5913B8FB-2B6D-4790-B362-5D3352B8EB43.html","GUID-4EDE83FB-AE28-483E-8180-C8ABB0538A21.html","GUID-782C9242-429D-469E-BAEF-BB2E868D5F7C.html","GUID-EE0330F8-57B6-4E06-8096-3D9FF1D57C4D.html","GUID-9F6F8FCB-49E9-4355-B72D-FF79A905F622.html","GUID-02A0409B-737D-4B57-BADB-0ECC8AF4714C.html","GUID-65C1065C-E3CA-40BE-BB5B-0E8E7B074563.html","GUID-C2CB215D-3AE9-443C-BA05-01CC14A67100.html","GUID-E1CA9326-26B7-4E63-85F7-0DB2EEAED286.html","GUID-B1D36D7B-7A26-4B4E-B5DB-E314EF9CEF9F.html","GUID-C38003EC-3345-481E-B69C-EA4F23795447.html","GUID-E8EA7841-B747-4373-9373-443D66C7E220.html","GUID-66762CCC-9D4D-406B-94FD-EB2C7F863A64.html","GUID-2D8C92F7-BF6F-41C1-A51E-0903BB945E9C.html","GUID-2ADC0446-33A7-4D75-BB69-6487C6367907.html","GUID-93310D57-DE98-40F6-9887-031881730143.html","GUID-373ECDE6-AFFD-44B5-AE97-7CF1A8FCC4AD.html","GUID-D2E5C5EF-084F-493A-943E-BBB8014845D8.html","GUID-0806BDA9-FE8A-4D36-B216-56A8D56D33D7.html","GUID-916867C6-2BD7-4EC4-ADFD-FA2F22F64DDE.html","GUID-6083BB97-E5F0-4D7F-9630-6671CC9DD7A7.html","GUID-D4F67456-935E-4EFC-88E7-EB2E0063105B.html","GUID-E575213F-CC6E-40F5-8955-BD123550DD4F.html","GUID-AFBA1025-60D0-48D4-AA2B-0F2B41F1ECFE.html","GUID-A2A3C4CF-8C73-4F62-9809-2B710A7783A0.html","GUID-1D9DED98-CBBD-4169-BA95-B3FFD7132E28.html","GUID-B100A198-F557-4D9B-83FF-C5ADEC4EFF86.html","GUID-78A16873-B401-41CD-84C9-638D2324436A.html","GUID-77B23EFD-7164-495F-9C75-4BE5D27443B1.html","GUID-CE3EF484-E886-4378-90B5-20C2BC7A43D1.html","GUID-6A361F7F-55F2-4965-AED4-AEE549D5550F.html","GUID-369581E4-E1C7-4395-8F38-B175B9EAD9C1.html","GUID-452914FD-66E7-46B4-99B6-B1C1D15A3E4B.html","GUID-BA1CD773-8303-4C77-B4C0-23BCD41231C5.html"];

var SearchTitles = ["MPLAB® Harmony 3 Smart Energy G3 application examples",
"PHY PLC Go",
"Application Example",
"Initialization",
"Transmission",
"Reception",
"PHY Sniffer",
"Initial Steps",
"Capture Window",
"PRIME",
"PRIME Hexa View",
"PRIME Packet View",
"PRIME Network View",
"PRIME Nodes/Switches Plot View",
"PRIME Filter Window",
"Statistics/Script Launcher",
"Building Your Own Scripts",
"G3",
"Security Configuration",
"G3 Hexa View",
"G3 Packet View",
"G3 Device List View",
"G3 Device/Depth Graph View",
"G3 Filter Tool",
"Other Operations",
"Log View",
"Import and Export Databases",
"Rebuild Databases",
"Appendix A PRIME SQLite Log Database",
"Appendix B G3 SQLite Log Database",
"Command Type Identifier",
"Event Table",
"Sample SQLite Filters",
"How Many Times a Node Has Joined to the Network",
"Last Data Communication with a Node",
"Last Path Update for a Device",
"Appendix C PRIMEv1 3 Use Case Examples",
"SN Registration Request",
"SN Connection Establishment",
"BN Disconnection",
"SN Promotion Process",
"SN Registration Request through a Switch",
"Demotion Process Initialized by the Base Node",
"Data Transfer",
"PHY Tester Tool",
"Software Installation",
"General Operation",
"Test Execution Tab",
"PHY TX Console",
"MACrt PLC Go",
"Application Example",
"Initialization",
"Transmission",
"Reception"];

var SearchInfo = [" MPLAB® Harmony 3 Smart Energy G3 application examples The following applications are provided to demonstrate the typical or interesting usage models of the PHY layer of the G3-PLC communication stack provided by Microchip Name Description PHY PLC and Go This example is intended to show a simple application running on top of the G3 PHY layer PHY Tester Tool The PHY Tester tool is an application example that allows checking of the complete performance of the Microchip G3 PHY Layer on PLC boards PHY Sniffer Tool The PHY Sniffer is an application example that uses the PHY layer to monitor PLC frames in the G3 network and send them via USI serialization PHY Tx Test Console The PHY Tx Test Console is an application example that demonstrates the complete performance of the Microchip G3 PHY Layer avoiding timing limitations in the PC host ",
							" PHY PLC Go  PLC Go is Microchip’s example to get started quickly with Power Line Communications (PLC) PLC Go implements a basic application example of low data rate PLC (up to 200 of kbps) using OFDM modulation that supports point to point and multi-point communications  PLC Go runs a chat application between two or more end points using Microchip PLC modem boards The end points in this example are PCs which are connected via serial interface (USB UART) to Microchip evaluation boards acting as PLC modems Any end point can transmit a message which is received by the other end points in the network The application example allows end points to configure several PLC parameters such as modulation type modulation scheme and band of transmission (in case of using a Microchip evaluation board that supports several bands of transmission)  PLC Go chat application is built on top of the physical layer (PHY) of state-of-the-art standards for PLC such as PRIME and G3-PLC As such PLC Go is taking advantage of the speed robustness and frequency band profiles defined by the PHY layers of these standards For the sake of simplicity PLC Go removes all advanced networking features available in the MAC layers of PRIME and G3-PLC These are not required for the basic point to point / point to multi-point communication scenarios described in this application note     Microchip PLC solution is flexible and provides designs optimized for several frequency sub-bands below 500 kHz Adopters can decide which band to use based on application’s restrictions and /or communications performance which can be affected by different types of noise sources in the PLC channel  ",
							" Application Example  Microchip PLC Go application is a point to multi-point chat application built on top of the PHY layer of state-of-the-art G3-PLC protocol  Note that phy_plc_and_go application example can be used with Microchip G3-PLC stack version 1 4 1 or above in any Microchip platforms implementing PL360/PL460 device as PLC modem  This application example assumes that a host device (a PC for example) is connected through a serial interface (USB UART) to a Microchip evaluation kit acting as a PLC modem  The figure below provides an example of the minimum hardware and firmware resources required to run PLC Go   PLC Go Block Diagram    The PLC Go application interchanges data with the PC through a serial port using a terminal emulator (see figure PLC Go console where terminal emulator TeraTerm is used) The settings of the serial port are: 921600 bps 8 data bits no parity 1 stop bit and flow control  When the serial port is opened the PLC Go application shows in the console some information about the hardware platform and the firmware running and it waits for a message to be sent The message is sent when a carriage return character is received or the maximum length of the PLC data message is reached If the user sends the ASCII character 0x13 (‘CTRL+S’) a configuration menu is shown  The PLC Go application allows to:   Configure modulation type and modulation scheme  Configure the band of transmission (in case of using a Microchip evaluation board that supports several bands of transmission)   In addition the application provides some information about the transmitted messages (length of the message) and the received messages (Modulation type and scheme signal quality) which can be displayed by means of a terminal emulator in the PC   PLC Go Console    In the example project the app_plc c file contains:   PLC initialization and configuration functions  Handlers for received messages transmission and events   The app_console c file contains the chat application which communicates with the PC using the serial port  ",
							" Initialization  In the code of the example project phy_plc_and_go the initialization of the PLC is performed during the first states of the state machine running in the PLC task APP_PLC_Tasks()   PLC Hardware Initialization  The first states of the state machine configure and initialize different parts of the PLC hardware:  APP_PLC_STATE_IDLE initializes the variables related to the coupling stage  APP_PLC_STATE_INIT opens the PLC driver to load the PL360 binary   The PLC Go application loads by default the configuration to use the default coupling stage of the evaluation kit (CENELEC-A for the ATPL360-EK and FCC + CENELEC-A Multiband for the PL460-EK) If other coupling configuration is required it can be easily modified in PLC_PHY module of the project graph in MPLAB Code Configurator:   Coupling Configuration in PLC_PHY Module    Callback setting  The state APP_PLC_STATE_OPEN configures the PLC callbacks to manage the different events coming from the PL460 applies the initial configuration and enables the PVDD monitor required to transmit with the PL460  The callbacks to manage different events are:   Data_indication event is managed by APP_PLC_DataIndCb() function to process all the PLC messages received  Data_confirm event is managed by APP_PLC_DataCfmCb() function to process the results of sending a PLC message  Exception events are managed by APP_PLC_ExceptionCb() function  PLC disable sleep mode event is managed by APP_PLC_SleepModeDisableCb() function to restart the configuration  PVDD monitor events are managed by APP_PLC_PVDDMonitorCb() function   case APP_PLC_STATE_OPEN: { /* Check PLC transceiver */ if (DRV_PLC_PHY_Status(DRV_PLC_PHY_INDEX_0) == SYS_STATUS_READY) { /* Configure PLC callbacks */ DRV_PLC_PHY_ExceptionCallbackRegister(appPlc drvPl360Handle APP_PLC_ExceptionCb DRV_PLC_PHY_INDEX_0); DRV_PLC_PHY_DataCfmCallbackRegister(appPlc drvPl360Handle APP_PLC_DataCfmCb DRV_PLC_PHY_INDEX_0); DRV_PLC_PHY_DataIndCallbackRegister(appPlc drvPl360Handle APP_PLC_DataIndCb DRV_PLC_PHY_INDEX_0); DRV_PLC_PHY_SleepDisableCallbackRegister(appPlc drvPl360Handle APP_PLC_SleepModeDisableCb DRV_PLC_PHY_INDEX_0); /* Apply PLC initial configuration */ APP_PLC_SetInitialConfiguration(); /* Enable PLC PVDD Monitor Service: ADC channel 0 */ SRV_PVDDMON_RegisterCallback(APP_PLC_PVDDMonitorCb 0);  PL360 enabling  When the callbacks are set the PL360 binary is already loaded from flash memory and its integrity is checked but transmission is not allowed until the PVDD Monitor Service starts:  /* Enable PLC PVDD Monitor Service: ADC channel 0 */ SRV_PVDDMON_RegisterCallback(APP_PLC_PVDDMonitorCb 0); SRV_PVDDMON_Start(SRV_PVDDMON_CMP_MODE_OUT);  ",
							" Transmission  In the PLC Go application to transmit a message it is only needed to call the function APP_PLC_SendData() passing as parameters the pointer to the data buffer and the data length The function includes the length of the message to transmit in the first two bytes of the data buffer so that at the reception of the message it is possible to know the real length of the message  Any message transmitted by the PL360 requires a header including some transmission parameters These parameters and the data are stored in the structure DRV_PLC_PHY_TRANSMISSION_OBJ   The PLC Go application only allow the configuration of some transmission parameters related to the modulation The rest of the parameters required to send a PLC message are configured by default during the initialization stage in the function APP_PLC_SetInitialConfiguration() in the state APP_PLC_STATE_OPEN   The function APP_PLC_SetInitialConfiguration() configures the transmission parameters and stores the values in the structure In case of G3-PLC the maximum PSDU length depends on the modulation Reed-Solomon configuration tone mask and tone map Due to G3-PLC requirements before sending the message the data buffer is accommodated adding some padding bytes if it is necessary Zero bit padding is used to fit the encoded bits into a number of OFDM symbols that is a multiple of 4 In the example the PL360 is configured to add padding and CRC automatically enabling PIB ATPL360_REG_CRC_TX_RX_CAPABILITY (0x401C)  Once the transmission is configured the function APP_PLC_SendData() prepares the data to be sent by PLC storing the data in the transmission buffer ( appPlcTx pDataTx ) and indicating the length of the data buffer ( appPlcTx pl360Tx dataLength ) When all the information is in the transmission structure the function DRV_PLC_PHY_Send() sends the PLC message  After sending the message to be transmitted to the PL360 device a TX data confirm event is triggered indicating the result of the transmission This event is managed by the APP_PLC_DataCfmCb() callback function This callback receives as parameter a data structure of type DRV_PLC_PHY_TRANSMISSION_CFM_OBJ    Structure DRV_PLC_PHY_TRANSMISSION_OBJ  // ***************************************************************************** /* G3 Transmission setup data Summary: This struct includes all information to describe any transmissions Remarks: None */ typedef struct __attribute__((packed aligned(1))) { uint8_t *pTransmitData; /* Pointer to data buffer to transmit */ uint32_t time; /* Instant when transmission has to start referred to 1us PHY counter */ uint16_t dataLength; /* Length of the data to transmit in bytes */ uint8_t preemphasis[NUM_SUBBANDS_MAX]; /* Preemphasis for transmission */ uint8_t toneMap[TONE_MAP_SIZE_MAX]; /* Tone Map to use on transmission */ uint8_t mode; /* Transmission Mode (absolute relative forced continuous cancel) */ uint8_t attenuation; /* Power to transmit */ uint8_t pdc; /* Phase Detector Counter */ uint8_t rs2Blocks; /* Flag to indicate whether 2 Reed-Solomon blocks have to be used (only used for FCC) */ DRV_PLC_PHY_MOD_TYPE modType; /* Modulation type */ DRV_PLC_PHY_MOD_SCHEME modScheme; /* Modulation scheme */ DRV_PLC_PHY_DEL_TYPE delimiterType; /* DT field to be used in header */ } DRV_PLC_PHY_TRANSMISSION_OBJ;  Transmission messages are composed using data structure DRV_PLC_PHY_TRANSMISSION_OBJ defined in drv_plc_phy_comm h  Where:  pTransmitData : Pointer to the buffer containing the data to transmit  time : Delay to send the message in ms referred to PL360 internal timer  dataLength : length of the data buffer containing the data to transmit  preemphasis : Attenuation of subbands Not used  toneMap : Dynamic notching of carriers in the subband  mode : Transmission mode        uc_tx_mode  Description      TX_MODE_ABSOLUTE  The message is sent at the specified time referred to PL360 internal timer (1 us) Time defined in ul_tx_time    TX_MODE_RELATIVE  The message is sent with a delay referred to the transmission request time Delay defined in ul_tx_time    TX_MODE_FORCED  Transmission has a higher priority than a reception in progress    TX_MODE_SYNCP_CONTINUOUS  Continuous transmission of the preamble Used for testing    TX_MODE_SYMBOLS_CONTINUOUS  Continuous transmission of a message Used for testing    TX_MODE_CANCEL  Cancels the ongoing transmission (started or programmed)      attenuation : Signal attenuation (3dBs/unit and 0 means maximum signal level)  pdc : Phase detector counter  rs2Blocks : Number of Reed-Solomon blocks used (only valid for FCC band)  modType : Modulation type         uc_mod_type  Value  Description      MOD_TYPE_BPSK  0  BPSK Modulation    MOD_TYPE_QPSK  1  QPSK Modulation    MOD_TYPE_8PSK  2  8PSK Modulation    MOD_TYPE_BPSK_ROBO  4  BPSK Robust Modulation      modScheme : Modulation scheme         uc_mod_scheme  Value  Description      MOD_SCHEME_DIFFERENTIAL  0  Modulation Scheme Differential    MOD_SCHEME_COHERENT  1  Modulation Scheme Coherent      delimiterType : Delimiter type used in the header         uc_delimiter_type  Value  Description      DT_SOF_NO_RESP  0  Acknowledgment is not requested    DT_SOF_RESP  1  Acknowledgment is requested    DT_ACK  2  Positive acknowledgement    DT_NACK  3  Negative acknowledgement      Structure DRV_PLC_PHY_TRANSMISSION_CFM_OBJ  // ***************************************************************************** /* G3 Result of a transmission Summary: This struct includes all information to describe any result of a previous transmission Remarks: None */ typedef struct { uint32_t time; /* Instant when frame transmission ended referred to 1us PHY counter */ uint32_t rmsCalc; /* RMS_CALC it allows to estimate tx power injected */ DRV_PLC_PHY_TX_RESULT result; /* Tx Result (see \"TX Result values\" above) */ } DRV_PLC_PHY_TRANSMISSION_CFM_OBJ;  The event returns one of the following transmission result values: // ***************************************************************************** /* G3 Result values of a previous transmission Summary: This list involves all available results from MCHP implementation Remarks: None */ typedef enum { DRV_PLC_PHY_TX_RESULT_PROCESS = 0 /* Transmission result: already in process */ DRV_PLC_PHY_TX_RESULT_SUCCESS = 1 /* Transmission result: end successfully */ DRV_PLC_PHY_TX_RESULT_INV_LENGTH = 2 /* Transmission result: invalid length error */ DRV_PLC_PHY_TX_RESULT_BUSY_CH = 3 /* Transmission result: busy channel error */ DRV_PLC_PHY_TX_RESULT_BUSY_TX = 4 /* Transmission result: busy in transmission error */ DRV_PLC_PHY_TX_RESULT_BUSY_RX = 5 /* Transmission result: busy in reception error */ DRV_PLC_PHY_TX_RESULT_INV_SCHEME = 6 /* Transmission result: invalid modulation scheme error */ DRV_PLC_PHY_TX_RESULT_TIMEOUT = 7 /* Transmission result: timeout error */ DRV_PLC_PHY_TX_RESULT_INV_TONEMAP = 8 /* Transmission result: invalid tone map error */ DRV_PLC_PHY_TX_RESULT_INV_MODTYPE = 9 /* Transmission result: invalid modulation type error */ DRV_PLC_PHY_TX_RESULT_INV_DT = 10 /* Transmission result: invalid delimiter type error */ DRV_PLC_PHY_TX_CANCELLED = 11 /* Transmission result: transmission cancelled */ DRV_PLC_PHY_TX_RESULT_HIGH_TEMP_120 = 12 /* Transmission result: high temperature error */ DRV_PLC_PHY_TX_RESULT_HIGH_TEMP_110 = 13 /* Transmission result: high temperature warning */ DRV_PLC_PHY_TX_RESULT_NO_TX = 255 /* Transmission result: No transmission ongoing */ }DRV_PLC_PHY_TX_RESULT;   ",
							" Reception  When a PLC message is received it is processed in the callback function APP_PLC_DataIndCb() This function receives a structure of type DRV_PLC_PHY_RECEPTION_OBJ as a parameter containing all the available data from the message  The callback function checks if CRC validation was OK extracts some data about the modulation and signal received The function checks the length of the message and sends the content and information about the signal quality to the host console  Structure DRV_PLC_PHY_RECEPTION_OBJ  // ***************************************************************************** /* G3 Reception parameters Summary: This struct includes all information to describe any new received message Remarks: None */ typedef struct __attribute__((packed aligned(1))) { uint8_t *pReceivedData; /* Pointer to received data buffer */ uint32_t time; /* Instant when frame was received (end of message) referred to 1us PHY counter */ uint32_t frameDuration; /* Frame duration referred to 1us PHY counter (Preamble + FCH + Payload) */ uint16_t dataLength; /* Length of the received data in bytes */ uint16_t rssi; /* Reception RSSI in dBuV */ uint8_t zctDiff; /* ZCT info */ uint8_t rsCorrectedErrors; /* Errors corrected by Reed-Solomon */ DRV_PLC_PHY_MOD_TYPE modType; /* Modulation type */ DRV_PLC_PHY_MOD_SCHEME modScheme; /* Modulation scheme */ DRV_PLC_PHY_DEL_TYPE delimiterType; /* DT field coming in header */ uint8_t crcOk; /* MAC CRC 1: OK; 0: BAD; 0xFE: Timeout Error; 0xFF: CRC capability disabled (PLC_ID_CRC_TX_RX_CAPABILITY) */ uint16_t agcFine; /* Test data information */ uint32_t agcFactor; /* Test data information */ int16_t agcOffsetMeas; /* Test data information */ uint8_t agcActive; /* Test data information */ uint8_t agcPgaValue; /* Test data information */ int16_t snrFch; /* Test data information */ int16_t snrPay; /* Test data information */ uint16_t payloadCorruptedCarriers; /* Number of corrupted carriers */ uint16_t payloadNoisedSymbols; /* Number of noised symbols */ uint8_t payloadSnrWorstCarrier; /* SNR of the worst carrier */ uint8_t payloadSnrWorstSymbol; /* SNR of the worst symbol */ uint8_t payloadSnrImpulsive; /* SNR of impulsive noise */ uint8_t payloadSnrBand; /* SNR of Narrowband noise */ uint8_t payloadSnrBackground; /* Background SNR */ uint8_t lqi; /* Link Quality Indicator */ uint8_t toneMap[TONE_MAP_SIZE_MAX]; /* Reception Tone Map */ uint8_t carrierSnr[PROTOCOL_CARRIERS_MAX]; /* SNR per carrier */ } DRV_PLC_PHY_RECEPTION_OBJ;  The structure contains all the information available about the message received The fields of the structure are:        pReceivedData  Pointer to data buffer containing received frame The received frame includes padding (if needed) CRC is included if the CRC capability in the PL360 is disabled    time  Instant when frame was received (end of frame) referred to 1µs PHY counter    frameDuration  Frame duration in µs (Preamble + FCH + Payload)    dataLength  Length of received frame in bytes    rssi  Received Signal Strength Indicator in dBµV    zctDiff  Phase difference with transmitting node in multiples of 60 degrees    rsCorrectedErrors  Number of errors corrected by Reed-Solomon    modType  Modulation type of the last received frame Related constants defined in section     modScheme  Modulation scheme of the last received frame Related Constants defined in section    delimiterType  DT field coming in header Related Constants defined in section    crcOk  CRC verification result (1: OK; 0: BAD; 0xFE: unexpected error; 0xFF: CRC capability disabled See PIB ATPL360_REG_CRC_TX_RX_CAPABILITY (0x401C))    agcFine  Factor that multiplies the digital input signal (13 bits)    agcFactor  Global amplifying factor of the main branch (21 bits)    agcOffsetMeas  DC offset after the ADC that will be removed in case the DC Blocker is enabled (10 bits)    agcActive  Flag to indicate if AGC is active    agcPgaValue  Gain value applied to the PGA (3 bits)    snrFch  SNR of the header in quarters of dBs    snrPay  SNR of the payload in quarters of dBs    payloadCorruptedCarriers  Number of corrupted carriers in payload due to narrow/broad-band noise    payloadNoisedSymbols  Number of corrupted symbols in payload due to impulsive noise    payloadSnrWorstCarrier  SNR for the worst case carrier of the payload in quarters of dBs    payloadSnrWorstSymbol  SNR for the worst case symbol of the payload in quarters of dBs    payloadSnrImpulsive  SNR of corrupted symbols in payload due to impulsive noise in quarters of dBs    payloadSnrBand  SNR of corrupted carriers in payload due to narrow/broad-band noise in quarters of dBs    payloadSnrBackground  SNR without taking into account corrupted carriers and symbols in quarters of dBs    lqi  Link Quality Indicator SNR in quarters of dBs with offset of 10 dB (value 0 means -10 dB)    toneMap  Tone Map in received frame Related constants explained below    carrierSnr  SNR for each carrier in dBs (with offset of 10dB i e value 0 means -10dB) Related constants explained below      Related symbolic constants affecting toneMap parameter:  #define NUM_SUBBANDS_CENELEC_A 6 /* Subbands for Cenelec-A bandplan */ #define NUM_SUBBANDS_CENELEC_B 4 /* Subbands for Cenelec-B bandplan */ #define NUM_SUBBANDS_FCC 24 /* Subbands for FCC bandplan */ #define NUM_SUBBANDS_ARIB 16 /* Subbands for ARIB bandplan */ […] #define TONE_MAP_SIZE_CENELEC 1 /* Tone Map size for Cenelec(A B) bandplan */ #define TONE_MAP_SIZE_FCC 3 /* Tone Map size for FCC bandplan */ #define TONE_MAP_SIZE_ARIB 3 /* Tone Map size for ARIB bandplan */ […] #define TONE_MAP_SIZE_MAX TONE_MAP_SIZE_FCC #define NUM_SUBBANDS_MAX NUM_SUBBANDS_FCC /* Maximum number of subbands */  Related constants affecting carrierSnr parameter:  #define NUM_CARRIERS_CENELEC_A 36 /* Number of carriers for Cenelec-A bandplan */ #define NUM_CARRIERS_CENELEC_B 16 /* Number of carriers for Cenelec-B bandplan */ #define NUM_CARRIERS_FCC 72 /* Number of carriers for FCC bandplan */ #define NUM_CARRIERS_ARIB 54 /* Number of carriers for ARIB bandplan */ […] #define PROTOCOL_CARRIERS_MAX NUM_CARRIERS_FCC /* Maximum number of protocol carriers */  ",
							" PHY Sniffer  The PLC Sniffer has been developed to monitor data traffic on power line networks This tool focuses on PRIME (versions 1 3 and 1 4) and G3-PLC standards It requires a hardware probe device physically connected to the power line to snoop This hardware device will send the packet sent on the network through a serial link or a TCP/IP connection to a PC host running this software Hardware probes are passive elements inside the network Thus they do not interfere either physically or logically with the network  The sniffer tool can be used to:  Analyze network problems  Gather and report network statistics  Monitor network usage  Debug network protocols  Improve network understanding    Sniffer Scheme   The various messages received from the sniffer hardware are properly processed and displayed in the different existing windows:  Packet view This is the basic presentation It is made on the main application window and it is always visible Each message is decoded and split in its different fields These fields are selectively shown in the windows in a sample per line basis Color codes are applied depending on the packet type  PDU view This window displays detailed information associated with a certain message which has been selected by the user from the message list  Hexadecimal view This view allows inspecting packet data in raw mode Data is shown in hexadecimal format  Network structure view This view displays the logical network structure This information is inferred analyzing in real time all the packets received from the sniffer Selecting a packet in the Packet View will update this view accordingly It is recommended to use this feature with a sniffer connected nearby a concentrator This view is only available for PRIME standard   On the acquired packets we can also apply a set of filtering rules so we can remove unnecessary information in the samples or highlight the desired portions of them The application of these filters does not affect the sample database so that we can reverse their action at any time  The PLC Sniffer stores all the acquired frames in a SQLite database Using a SQL database allows performing of complex analysis of the data even if the database is being updated at the same time SQL also helps to handle the complexity of large log files   Disclaimer  It should be kept in mind that the traffic analysis could include discrepancies with reality Traffic seen by the hardware sniffer device may differ from what other devices on the network see due to the nature of the PLC channel Recording information nearby the concentrator will produce the best results  It also should be noted that the database stores the events to build the logical structure of the network These events may or may not have a full representation of a network depending on when the sniffer has started to collect data and the point where the hardware device is connected Best results are obtained when the sniffer session is started right after the Base Node starts operating in the network  PLC Frequency Band Configuration  The PHY Sniffer application loads by default the configuration to use the default coupling stage of the evaluation kit (CENELEC-A for the ATPL360-EK and FCC + CENELEC-A Multiband for the PL460-EK) If other coupling configuration is required it can be easily modified in PLC_PHY module of the project graph in MPLAB Code Configurator:   Coupling Configuration in PLC_PHY Module    ",
							" Initial Steps  Software Installation  To install the software execute the installation wizard provided First window allows selecting between multiuser support and current user   First Wizard Window    Read and accept terms and conditions expressed in the End User License Agreement:   License Agreement    Next select the components to install:   Select Components    And finally select the folder where the software must be installed or just simply use the default location:   Select Folder    The wizard will finish without any further configuration:   Installation Completed    The installation procedure generates desktop and start menu shortcuts Use any of them to start the software  Hardware Sniffer Device  Along with the PLC Kit you received the instructions to build the appropriate firmware using Atmel Studio or IAR tools Build and program your embedded kit with the correct settings for your needs It is important to note that the firmware configuration must match your hardware device  Starting the Sniffer  The first step is to plug the hardware device to the power line Then connect the USB cable to the host computer Now we are ready to start the PLC Sniffer software using for example the link created on your desktop during the install process  Now you must see the main window:   PLC Sniffer Main Window    In order to start capturing packets on the network it is necessary to setup input and database parameters Input parameters allow choosing between serial and TCP/IP link as well as choosing between PRIME and G3-PLC standards Set the appropriate settings for hardware sniffer   Input Settings Dialog     If the COM port to choose is not known it can be located in the Windows Device Manager in the Port (COM LPT) section In this example the COM18 is used:   Windows Device Manager     Once the input settings have been configured it is necessary to setup the database file to store the traffic This software uses SQLite to save all the packets snooped Using SQLite allows performing complex searches and filters on the relational database  It is also possible to select a TCP/IP input This is useful to access remote hardware For example it could be possible to setup a relay station using connected embedded Linux board and socat software   Database Settings     Database files can hold large logs without having to split them in pieces Also files can be opened with any SQLite data analyzer tool for example the Mozilla Firefox plug-in SQLite Manager It is possible to build your own scripts (for example in Python) to analyze the data Section Building Your Own Scripts shows how to do this  There are three options when creating a log database:  Append: Use this option if you wish to keep data already stored in the database file If the selected file does not exist a new database is created  Overwrite: Each time the capture is started the database is initialized Previously recorded data in the database will be lost  Date-time suffix: In this case the file name supplied is modified adding a suffix with the date and time of the beginning of the log capture Each time a new capture is started a new file will be created with the corresponding date/time suffix   Database settings also allow selection of an initialization script Leave it empty if you do not wish to modify the default behavior  The initialization script will be executed right after a new database is created This allows setting up of the database to a predefined state There are a set of scripts supplied along with the PLC Sniffer that prepare the database to be able to decode all the messages sent in the Interoperability tests defined by the G3-PLC Alliance These scripts are located in {Program_Install}/Init-DB-Scripts folder  At this point the tool is ready to start capturing data Click on the menu Capture → Start to begin logging data The status bar at the bottom of the window will show the current setup and status of the tool  ",
							" Capture Window ",
							" PRIME  On a PRIME network the main window will look like this:   Capture Window (PRIME)     The capture window has a tool bar with four commands:   Capture Window Tool Bar (PRIME)    Pause command will stop the update of the scroll view while the logging process will continue No frames will be lost To restart showing the live stream of PDUs click the play button  Channel combo box allows selecting the PRIME channel to listen A compatible device must be used; otherwise this option has no effect  The last command button will set the CRC configuration on the hardware device If enabled the hardware device will calculate the CRC on all the frames and discard frame errors If disabled all frames received will be sent to the PC software The status of this setting is shown in the CRC column  The main window displays a table with the current log It is updated in real time as frames are received from the hardware sniffer The data shown is:  idFrame: index of the frame  Timestamp: timestamp of the frame If it is not provided by the hardware/remote sniffer device but added by the PC software The timestamp is stored as a 64-bit integer with resolution of milliseconds  Modulation: modulation scheme used to transmit this frame  Symbols: number of OFDM symbols used to transmit this frame  SNR: signal-to-noise ratio as defined by PRIME standard and returned by the “PHY_SNR confirm primitive”  ExSNR: extended SNR SNR measured in dB  RSSI: Received Signal Strength Indication measured by the hardware sniffer in dBµV  Channel: PRIME channel in which the sniffer is listening  TimeIni: start of reception of this frame in reference to the first frame received Units: milliseconds  TimeEnd: end of frames Unit: milliseconds  Duration: length of this frame in milliseconds  Delta: time between the beginning of this frame and the beginning of the previous frame  CRC: shows if the CRC check is enabled on the hardware sniffer or performed by the software If CRC is enabled on the hardware device CRC value for the frame is not available  UP_Down: Direction of the frame Down means that a frame has its origin on the Base Node Up frames originate in terminal nodes  NAD: No aggregation at destination  Level: indicates in which level on the topology the frame has been originated A sniffer can listen frames from different levels in the hierarchy depending on the medium conditions  PduType: defined by PRIME standard PNPDU BEACON GENERIC  GenType: defined by PRIME standard Generic frames can be Control or Data PDUs  LCID: Local Connection Identifier Defined by PRIME Standard  SID: Switch Identifier  LNID: Local Node Identifier  Length: Length of the PDU in bytes  PrimeType: Frame type as defined by PRIME standard It can be: Type A (PRIME 1 3 frames) Type B (Robust modes defined in PRIME 1 4 standard) or Type BC (Backwards Compatible frame defined in PRIME 1 4 standard)  RM: Robust mode this field only makes sense in PRIME 1 4 networks It specifies the weakest modulation a device can decode from a receiving peer  TicksIni/TicksEnd: sniffer internal clock counter This counter measures the time as seen by the source device Units and size depend on the specific hardware PL360 and ATPL230 based sniffers have a 32-bit 10 tenths of microsecond clock Older ADD1021 SAM4SP32A have a 20-bit 10 tenths of microseconds clock These values are used to compute the Duration and Delta values   While the PLC traffic is logged into a database the software tries to infer the PLC network structure and status as seen by the Base Node This information is shown in several docking views:  Hexa View  Packet View  Network View  Nodes/Switches Plot  Filter View   ",
							" PRIME Hexa View  This view shows the hexadecimal display of the frame selected in the main view Parts of the message identified as the header and CRC on the protocol are colored If CRC option is enabled the CRC data is not shown   Hexa View Window Showing a Generic Data Frame    ",
							" PRIME Packet View  This view shows the disassembled data of the frame selected in the main window All the fields specified on the PRIME specification are shown   Packet View Window Showing a Keep Alive PDU    ",
							" PRIME Network View  This window shows the current status of the network inferred by the software It is refreshed every time a change in the network is detected; for example a new device is registered or promoted to switch If a frame is selected in the main view then the network status is rebuilt to show the status of the network until that frame  The PLC Sniffer uses Register Promotion and KeepAlive frames to guess the current status of the network The accuracy of this information depends on the information supplied by the sniffing device The network view should be accurate if the sniffing device is next to the Base Node (hardware sniffer and Base Node received the same frames)   Network View Showing the Structure of a 300 Node Network    ",
							" PRIME Nodes/Switches Plot View  This window shows the evolution of the network as seen by the sniffer It plots the number of active nodes and switches on the network versus time and is useful to detect problems of stability on the PLC network Use the mouse wheel to zoom in and out   Nodes/Switches Plot View     Figure   1 shows the network structure of a PLC network and how it has evolved after a reboot of the Base Node   PLC Sniffer Showing the Network Structure and Node/Switch Plot View    ",
							" PRIME Filter Window  The filter window (only allowed in Log View mode) allows selecting the frames shown in the main view table Several parameters can be used to setup a filter:  LNID  Generic Type  Frame Id  Level  MAC  Timestamp  Up/down  Channel  LCID  SID  PDU type   Also a combination of different parameters can be created and applied The filter then is transformed into a SQL statement used to query the database and retrieve the data shown in the table Figure   1 shows the Filter Tool for selecting the frames in the database that have the LNID equal to 127 and a generic type of Register This will select all register frames from nodes with the LNID equal to 127   Filter Tool Window     MAC filter performs a very complex query It searches the database for each time a PRIME node registers itself with a Base Node and gets assigned an LNID Also keeps track of PNPDUs frames It cannot be used with other filters  ",
							" Statistics/Script Launcher  Working with SQLite and Python is a very simple yet powerful way of analyzing the huge amounts of data gathered with the PLC Sniffer In order to allow building this kind complex analysis of the database an interface to call Python scripts from the PLC Sniffer has been included Five different example scripts are included:  Check Alives: This script searches the whole database looking for non sequential alives for a node Non sequential alives means Base Node retransmissions giving a glance of the overall link quality between the base and a node  Availability: measures the time that a node has been available (i e registered state)  Alive Counter: counts the number of alives produced in a time interval for a given level  Decode Firmware Upgrade: decoding generic data frames for the Firmware upgrade protocol  Beacon Counter: counts the number of beacons that an SID has emitted   These scripts need Python 3 (tested with version 3 3) with SQLite and XlsxWriter modules installed Some scripts use the XlsxWriter module to generate a Microsoft Excel file containing the results of the query   Script Launcher Dialog    ",
							" Building Your Own Scripts  When writing your own script please take a look at the Beacon Counter script in {PROGRAM_INSTALL} Scripts countBeacons py and use it as a guide In order to be able to call your scripts from the PLC Sniffer your script must accept the log database file name as a command line parameter expecified with “-d” flag:  myPythonScript –d log_database_name  Inside your script you can build complex queries or analyze data as needed Beacon Counter script is very simple and is included as an example for building your own scripts It can be replaced by a single SQL query:  SELECT Sid COUNT(*) FROM Frame where PduType = 2 GROUP BY Sid  Prime and G3 log database models are described in sections Appendix A PRIME SQLite Log Database and Appendix B G3 SQLite Log Database respectively Data fields are encoded as defined in the respective standards  In order to let the PLC Sniffer tool to launch your own scripts you must place your script in the {PROGRAM_INSTALL} Scripts folder and update the ScriptsDb xml file accordingly Add a new Script Section describing your script Each time the Script Launcher dialog is shown the ScriptDB xml file is parsed All scripts defined in xml file will be available in the dialog for execution  ",
							" G3  On a G3 network the main window looks like this:   Capture Window (G3)     The capture window has a tool bar with two commands: Pause and start with the same functionality than PRIME (see Figure   2 )  Main window display a table with the current log It is updated in real time as frames are received from the hardware sniffer The data shown is:  idFrame: index of the frame  Timestamp: timestamp of the frame If not provided by the hardware/remote sniffer device then it will be added by the PC software  ModType: modulation type used to transmit this frame  ModScheme: modulation scheme used to transmit this frame  DT (Delimiter Type): Parameter from PHY layer defined by G3 standard It indicates whether response is expected or not ( SOF_RESP / SOF_NO_RESP ) as well as positive or negative acknowledgement ( ACK / NACK )  Symbols: number of OFDM symbols used to transmit this frame  LQI: As defined in the G3 standard  RSSI: Received Signal Strength Indication measured by the hardware sniffer in dBµV  Duration: length of this frame in milliseconds  Delta: time between the beginning of this frame and the beginning of the previous frame  TMR (Tone Map Request): 1-bit field of G3 MAC header indicating the request of a Tone Map Response  CC (Contention Control): 1-bit field of G3 MAC header When it is 0 the next frame shall be transmitted using contention access otherwise the next segment shall be transmitted using the contention free slot (CFS)  CAP (Channel Access Priority): 1-bit field of G3 MAC header indicating normal (0) or high (1) priority  LSF (Last Segment Flag): 1-bit field of G3 MAC header indicating whether it is the last segment or not  SegmentCount: Index of segment within a fragmented frame  PduType: Defined by G3 standard Beacon Data MAC Command  CmdType: If the frame is a MAC Command it can be Beacon Request or Tone Map Response If the frame is Data and the security information is available then it will show the type of ADP message including LoWPAN Bootstrap and LOADng protocol frames  SecurityEn: 1-bit field of G3 MAC header indicating whether the data payload is encrypted by the MAC sublayer or not  SecurityLevel: Only present if SecurityEn is set It indicates the actual frame protection that is provided  SecFrameCounter: Defined by G3 standard Only present if SecurityEn is set It is used for the cryptographic mechanism  KeyIndx: Defined by G3 standard Only present if SecurityEn is set It identifies the key that is used for cryptographic protection of outgoing frames  SeqNumber: Defined by G3 standard It specifies the sequence identifier for the frame  PanIdCompression: 1-bit field of G3 MAC header specifying whether the MAC frame is to be sent containing only one of the PAN identifier fields when both source and destination addresses are present  DestAddrMode: Destination Addressing Mode Three possible values (address not present 16-bit address or 64-bit address)  SrcAddrMode: Source Addressing Mode Same as DestAddrMode for source address  DestPAN: Unique PAN identifier of the intended recipient of the frame  SrcPAN: Unique PAN identifier of the originator of the frame  DestAddress: Address of the intended recipient of the frame It can be not present 16-bit or 64-bit depending on DestAddrMode  SrcAddress: Address of the originator of the frame It can be not present 16-bit or 64-bit depending on SrcAddrMode  Length: PDU length in bytes  Pdu: PDU in hexadecimal format  HeaderLen: Length of the MAC header in bytes  PayloadLen: Length of the MAC payload in bytes  TicksIni/TicksEnd: Internal counter of the hardware sniffer This counter is 32-bit 1 microsecond accurate clock It is used by the sniffer hardware to measure time TicksIni marks the beginning of the reception of a frame and therefore TicksEnd shows the end of the frame These values are used to compute Duration and Delta of frames   While the PLC traffic is logged into a database the software tries to infer the PLC network structure and status as seen by the PAN coordinator This information is shown in several docking views:  Hexa View  Packet View  Filter View  Network View   ",
							" Security Configuration  G3 Security is based on a key hierarchy A global secret key (PSK Pre-Shared Key) must be known by all the devices in the network This PSK key allows a device to complete the bootstrap protocol securely with a network coordinator During the bootstrap protocol the network coordinator will provide the GMK (Group Master Key) to the devices The GMK key will be used to cipher all data packets in the network  It is possible to configure these keys into the sniffer application in order to be able to decipher all the communications If PSK is configured the LoWPAN Bootstrap protocol will be decoded and verified Also the sniffer will learn the GMK key when a full bootstrap sequence is decoded From that moment it will be able to decode all frames  If only the GMK is configured the sniffer will not be able to decode nor verify the EAP messages in the bootstrap protocol but it will be able to decode the data messages in the network  PSK and GMK can be configured using a database initialization script An initialization script {Program_Install}/Init-DB-Scripts/PSK_IOT txt containing both keys used in the G3 Alliance Interoperability tests is provided  It is important to note that if database is open in “append mode” the security initialization may not take effect if a prior GMK/PSK key has been initialized  ",
							" G3 Hexa View  This view shows the hexadecimal display of the frame selected in the main view Parts of the message are colored The MAC header is shown in green the MAC payload in yellow and the CRC in red Some bytes might by uncolored because they are the result of zero-padding of PHY layer thus such bytes are not part of the MAC frame   Hexa View Window Showing a Data Frame    ",
							" G3 Packet View  This view shows the disassembled data of the frame selected in the main window All the fields specified on the G3 specification are shown   Packet View Window Showing a Data PDU Containing a LoWPAN Bootstrapping Protocol Message    ",
							" G3 Device List View  This view lists all the nodes that are detected by the sniffer The sniffer uses the LoWPAN Bootstrap protocol frames to learn which devices are present in the network In order to decode those frames it is required to supply the PSK key of the network  Devices in the List View are arranged per PANID If the sniffer detects traffic from more than a G3-Network it will arrange the nodes in different tree structures A node is associated to a PANID using the addressing information of the “accepted” bootstrap frame Also the sniffer analyzes the routing Mesh Header present in the frames to create a tree structure based on the number of hops needed to reach a device This produces a hierarchical view of the network as shown in Figure   1   Device nodes on the list can be in 3 states:  Joining: The device has started the bootstrap protocol The sniffer has correctly decoded a LBP_JOIN frame  Challenge: The coordinator has sent an LBP_CHALLENGE EAP message 3 to the device assigning a short address  Accepted: The device node has received a LoWPAN Bootstrap ACCEPTED frame (It has successfully completed the bootstrap process) Based on the addressing information of the frame the LoWPAN Bootstrap Agent (LBA) value is updated    G3 Device List Window    Route cost is updated based in the LoadNG Route Request message Usually after the bootstrap process a device will query the network to obtain a route to the G3-Coordinator The device will use the LoadNG protocol to obtain the route Typically just after a node has completed the bootstrap process the network coordinator will receive a LoadNG Route Request frame Route cost obtained from the payload of this node will be shown As routes can change over time it useful to know when a device has requested a route To obtain this information from the sniffer database it is needed to execute an SQL query filter as:  SELECT Frame * FROM Frame RREQ WHERE (CmdType 16383) = 4096 AND idframe=RREQ_idFrame AND Originator = 5 ORDER BY idFrame DESC  That query will produce all route request frames for a device (originator) with short address “5” ordered by idFrame (i e showing newest request first)  Path column is updated each time the sniffer decodes a LoadNG Path Response message received by a PAN coordinator (destination address equals to 0) This message contains the complete route between a device and the network coordinator This route may change over time and similarly to the Route Cost it is possible to query the sniffer database to find out the Path updates for a device node:  SELECT Frame * FROM Frame PREP WHERE (CmdType 16383) = 4349 AND PREP_idframe = idframe AND Originator = 3 ORDER BY idFrame DESC  Path request frames may not be present on the network It depends on the coordinator behavior Device List shows path as a list of hops Forward hops to reach the node are shown between square brackets (i e “[0001 0 0]” ) and reverse hops with braces (i e “{0002 0 1}” ) Each entry on the list contains three pieces of information:  Next hop address  Metric Not Supported field  Link cost   Forward path begins with the arrow symbol “= ” and reverse path with “ =”  ",
							" G3 Device/Depth Graph View  Based on the information learned from the analysis of the bootstrap protocol and routing Mesh Header this tool is able to produce a graph with the number of nodes currently connected to the network and the maximum depth reached (maximum number of hops to reach any device in the network)   G3 Device/Depth Graph Window    ",
							" G3 Filter Tool  The filter window (only allowed in Log View mode) allows selecting the frames shown in the main view table G3 Filter tool window   G3 Filter Tool    Several parameters can be used to easily setup a filter (green area in Figure   1 ):  Pdu Type  TimeStamp  Command Type  Source Pan  Destination Pan  Source Address  Destination Address  Frame Identifier  Modulation Type  Modulation Scheme   Filter parameters can also be manually edited Double-click over the clause selected in order to modify the filter Figure   2 shows this step   G3 Filter Being Edited    Complex filters can be created using SQL queries (blue area in Figure   1 ) This needs a better understanding of SQL relational databases and how the sniffer database has been designed Refer to section Appendix B G3 SQLite Log Database in order to learn about the database structure  ",
							" Other Operations  The PLC Sniffer also allows displaying logs from previous sessions imports logs from old data formats (old AddSemi sniffer tool) and from other Microchip tools It will be explained in the next sections  ",
							" Log View  From the start window menu File has three options:  Open Log: this option will open a file selection dialog to choose a database file to display The tool will recognize whether the database corresponds to PRIME or G3  Rebuild Log: this option is used to select an old log created with former versions of this tool If the database format has changed then it is needed to reconstruct the database in order to display data correctly  Open Current Database: this option will open the current selected log database (shown at the bottom in the status bar) It allows inspection of the current capture database without stopping the sniffer Capture window only shows the last two thousand frames   These options will open a new independent window showing the database selected This allows having independent windows for capturing and displaying data shown in Figure   1 The Log View shares the same display options than the Capture Window but it splits the database in pages of 10 000 frames A tool bar for navigating the whole database is added   Log View of a 38 PRIME Node Database    The Filter Window in Log View will add an extra feature It allows setting a filter as a standard SQL query This way very complex filter queries can be built for example:  select * from frame where lnid = 284 and (GenType = 1 OR Gentype= 7)  This query selects alive and register control frames that belong to the node with LNID equal to 284 This is useful to analyze the behavior of a node  The Log View window can export a database to a CSV file or a fragment of a database into a new database file This is useful when dealing with big database logs  The main window and the Network View allow copying its data to the clipboard as CSV Use the right mouse button to access these options The Node/Switch view can be zoomed in and out using the mouse wheel Also this window clicking on the graph will scroll the table to the corresponding frame  ",
							" Import and Export Databases  PLC Sniffer can import logs from old AddSemi tools into a new database file Also databases can be created from raw dump files from an embedded sniffer  The export database feature has been introduced to help working with big databases (hundreds of Megabytes) In this kind of logs typically only a fraction of the database is needed to be analyzed Dealing with smaller databases will make the tool faster and will use fewer memory resources This might be important in old and slow computers  These features will not work if a Capture is in process   Export Database Fragment Dialog    Log’s Network view of the exported database might be different from the original database It will only show information available in the exported fragment  ",
							" Rebuild Databases  This feature allows to reprocess an old database and update the database format Newer versions of this software might need to do this in order to fix some bug or enable some new feature This process does not change the original data in any way  A typical use case is to decode ciphered databases after the log is recorded To do so proper key initialization must be done  ",
							" Appendix A PRIME SQLite Log Database  The PLC Sniffer creates a relational database using SQLite to store the PRIME logs Using this type of database to store the information helps to handle logs from complex networks and to inspect the data in very flexible ways Third party tools to handle SQLite databases can also be used A useful tool for SQLite database inspection is the SQLite Manager plug-in for Firefox browser  The current version of the database has 24 tables New tables have been included since version 1 1 9 to accommodate changes in the new PRIME 1 4 version This is the list of tables:  LogInfo: contains information about the database  Frame: each row of this table represents a PLC message on the power line This table contains the information displayed on the Capture and Log windows Includes the raw data of the received PDU and some parameters from the PHY Layer provided by the hardware Also includes a timestamp value  Beacon: disassembled information of the Beacon PDU as defined in PRIME 1 3 standard  Beacon1_4: disassembled information of the Beacon PDU as defined in PRIME 1 4 standard  PN: disassembled information of the Promotion Needed PDU as defined in PRIME 1 3 standard  PN1_4: disassembled information of the Promotion Needed PDU as defined in PRIME 1 4 standard  BeaconSlotInfo: disassembled information of BeaconSlotInfo control PDU (either PRIME 1 3 or 1 4)  CFP: Content Free Period control PDU disassembled information (PRIME 1 3 only)  ConnectionMng: Connection Management control PDU disassembled information (either PRIME 1 3 or 1 4)  FrameControl: Frame Control PDU disassembled information for PRIME 1 3 standard  FrameControl1_4: Frame Control PDU disassembled information for PRIME 1 4 standard  GenericData: Generic Data PDU information Includes SAR and ARQ disassembled information and a data integrity check for PRIME 1 3 standard  GenericData1_4: Generic Data PDU information Includes SAR and ARQ disassembled information and a data integrity check for PRIME 1 4 standard  KeepAlive: Alive control PDU disassembled information (only KeepAlives PRIME 1 3 are supported)  Multicast: Multicast management control PDUs disassembled information PRIME 1 3 standard  Multicast1_4: Multicast management control PDUs disassembled information PRIME 1 4 standard  PhyRobustness: Phy Robustness control PDUs disassembled information (only in PRIME 1 3)  Promotion: Promotion control PDUs disassembled information for PRIME 1 3 frames  Promotion1_4: Promotion control PDUs disassembled information for PRIME 1 4 frames  Register: Register control PDU disassembled information as defined in PRIME 1 3 standard  Register1_4: Register control PDU disassembled information as defined in PRIME 1 4 standard  Security: Security Information control PDU frames  Event: table containing network events detected: register unregister promotion demotion connection creation of nodes Also stores the number of nodes and switches currently active on the network Based on the information on this table it is possible to trace the status for each node on the network  Node: table containing the current status of all the nodes detected on the network Updated each time a new row is inserted on Event table Keeps track of last known state of the PLC network   All tables are linked through a common “idFrame” index This unique index is assigned when a new frame is inserted on the database This allows building complex search queries with SQL Table fields are encoded as specified in the PRIME standard  Figure   1 shows the tables and relations of a PRIME 1 3 log database New PRIME 1 4 tables connect in similar way to the table Frame   PLC Sniffer Prime 1 3 Log Database     A few examples of queries are:  Select all frames after idFrame 31060 that belong to the device registered as 284 and all register frames: Select * from frame where idFrame = 31060 and (lnid = 284 OR Gentype=1)  Select all Register and KeepAlive frames from device 284: Select * from frame where lnid = 284 and (GenType = 1 OR Gentype= 7)  Select all the register events for a node defined by a MAC address: Select * From Event Where Lnid IN (Select DISTINCT (lnid ) from Event WHERE MAC = X’001122334455’ AND SID IN (Select Distinct (SID) from Event Where MAC = X’001122334455’) AND Status = 4  Select Frames with LNID 35 and Promotion Needed frames for the node with MAC 001122334455 Some PRIME concentrators may assign the same LNID to different nodes at different time Therefore this query might not return all the frames sniffed for a node: Select * From Frame Where Lnid = 35 UNION Select Frame * From Frame PN WHERE idFrame = PN_idFrame and PNH_PNA = X’001122334455’   ",
							" Appendix B G3 SQLite Log Database  The PLC Sniffer creates a relational database using SQLite to store the G3 logs Using this type of database to store the information helps to handle logs from complex networks and to inspect the data in very flexible ways Third party tools to handle SQLite databases can also be used A useful tool for SQLite database inspection is the SQLite Manager plug-in for Firefox browser  The current version of the database has 14 tables:  LogInfo: contains information about the database  Frame: each row of this table represents a PLC message on the power line This table contains the information displayed on the Capture and Log windows Includes the raw data of the received PDU and some parameters from the PHY Layer provided by the hardware Also includes a timestamp value  Beacon: disassembled information of the Beacon PDU as defined in G3 standard  Data: data PDU as defined in G3 standard The data payload may contain a message from the adaptation sublayer If possible it will be disassembled and the proper information will be inserted in MeshHeader BroadcastHeader FragmentationHeader LBP_Header LBP_EAP and LBP_ConfParam tables  ToneMapResponse: disassembled information of the Tone Map Response PDU as defined in G3 standard  DecryptedData: When data payload is encrypted and the key is known the decrypted data will be stored in this table The key will only be known if the capture starts before the bootstrapping  MeshHeader: disassembled Mesh Header encapsulated in Data PDU as defined in G3 standard  BroadcastHeader: disassembled broadcast header encapsulated in Data PDU as defined in G3 standard  FragmentationHeader: disassembled fragmentation header encapsulated in Data PDU as defined in G3 standard  LBP_Header: disassembled LoWPAN bootstrapping protocol header encapsulated in Data PDU as defined in G3 standard  LBP_EAP: disassembled EAP message encapsulated in Data PDU as defined in G3 standard  LBP_ConfParam: disassembled configuration parameter message encapsulated in Data PDU as defined in G3 standard  RREQ: disassembled Route Request (message type of LOADng routing protocol) message encapsulated in Data PDU as defined in G3 standard  RREP: disassembled Route Reply (message type of LOADng routing protocol) message encapsulated in Data PDU as defined in G3 standard  RERR: disassembled Route Error (message type of LOADng routing protocol) message encapsulated in Data PDU as defined in G3 standard  PREQ: disassembled Path Request (message type of LOADng routing protocol) message encapsulated in Data PDU as defined in G3 standard  PREP: disassembled Path Reply (message type of LOADng routing protocol) message encapsulated in Data PDU as defined in G3 standard  RLCREQ: disassembled Route Link Cost Request (message type of LOADng routing protocol) message encapsulated in Data PDU as defined in G3 standard  RLCREP: disassembled Route Link Cost Reply (message type of LOADng routing protocol) message encapsulated in Data PDU as defined in G3 standard  LOADng_ForwardPaths: Forward paths associated to a PREQ message  LOADng_ReversePaths: Reverse paths associated to a PREQ message  Node: table containing the current status of all the nodes detected on the network  Event: table containing the status events that define the node table This table allows to reproduce the status of a node at any time of the log  G3KH: G3 Key hierarchy table containing all the keys knows by the sniffer If the PSK key is supplied the sniffer will know all key hierarchy and when a bootstrap sequence is completed the sniffer will learn the GMK key   All tables are linked through a common “idFrame” index This unique index is assigned when a new frame is inserted on the database This allows building complex search queries with SQL Figure   1 and Figure   2 show the tables and relations of a G3 log database Table fields are encoded as specified in the PRIME standard except CmdType Identifier This field is specified in the next section   PLC Sniffer G3 Log Database Part-1     PLC Sniffer G3 Log Database Part-2    ",
							" Command Type Identifier  PduType and CmdType fields on Frame table are encoded as shown in Table   1 The GUI shows this information in a user-friendly manner   Command Type Identifier Values         PduType  PduType String  CmdType  CmdType String      0x00  Beacon  -  -    0x01  Data  0  -(Data)    0x01  Data  0x1000  LNG_RREQ (LOADng Router Request)    0x01  Data  0x1001  LNG_RREP (LOADng Router Response)    0x01  Data  0x1002  LNG_RERR (LOADng Route Error)    0x01  Data  0x10FC  LNG_PREQ (LOADng Path Request)    0x01  Data  0x10FD  LNG_PREP (LOADng Path Response)    0x01  Data  0x10FE  LNG_RLCREQ (LOADng Route Link Cost Request)    0x01  Data  0x10FF  LNG_RLCREP (LOADnd Route Link Cost Response)    0x01  Data  0x2001  LBP_JOINING (LoWPAN Bootstrap Protocol JOINING)    0x01  Data  0x2011  LBP_ACCEPTED (LoWPAN Bootstrap Protocol Accepted)    0x01  Data  0x2012  LBP_CHALLENGE (LoWPAN Bootstrap Protocol Challenge)    0x01  Data  0x2013  LBP_DECLINE (LoWPAN Bootstrap Protocol Decline)    0x01  Data  0x2004  LBP_KICK (LoWPan Bootstrap Protocol Kick)    0x01  Data  0xFFFF  Error (Invalid error)    0x02  ACK  -  -    0x03  MAC Command  0  Invalid    0x03  MAC Command  0x07  BREQ (Beacon Request)    0x03  MAC Command  0x0A  TMR (Tone Map Response)    0x04  Error  -  -      ",
							" Event Table  Event table is used to store network events related to device nodes Event and Frame tables are linked using the field FrameId/IdFrame also Event and Node tables are related through key NodeId/IdNode   Fields in this table are:  IdEvent: table key Unique identifier for events  FrameId: foreign key to link with the main database table: Frame This field points to a specific frame that has triggered this event  Event: type of event It can have these values:  Joining A node has started a bootstrap process  Challenge Coordinator has send a challenge information to a device  Accepted Coordinator has received a Bootstrap confirmation from a device  Denied Either a node has been kicked from the network by the coordinator or has been denied access  Route Update The coordinator has received a route request from a node This frame contains information related to the route cost to a device  Hop Count Update The event is triggered when a message (targeting PAN coordinator) contains a Mesh Header Mesh Header has the number of hops that a node needs to communicate with the coordinator That information is used to sort the device list in levels  Path Update This event is triggered when a path response message is received by the PAN Coordinator This information is used to update the Device List accordingly   NodeId: Foreign key to Node table This field uniquely links an event to a device node  Data: this field holds different values depending on the event:  Event Data        Event  Name  Data      1  Joining  Empty    2  Challenge  Short Address assigned to a node    3  Accepted  LoWPAN Bootstrap Agent for this node    4  Denied  Empty    5  Route Cost Update  Array containing: Source Node (16-bit) Destination Node (16-bit) Neighbor node (16-bit) Cost (16-bit) number of hops (8-bit)    6  Hop Count Update  Array containing: Destination Node (16-bit) and number of Hops (8-bit)    7  Path Update  String containing the route path to a node       ",
							" Sample SQLite Filters  Relational databases allow complex data searches using the SQL language The SQLite log database is open and can be queried with any tool that can handle SQLite v3 0 files Figure   1 shows the SQLite Manager Firefox add-on This tool can be used to query sniffer databases It is also possible to query the database using any scripting language with SQLite bindings such as Python Following are a few examples of how to query the database   SQLite Manager Add-On for Mozilla Firefox Browser    ",
							" How Many Times a Node Has Joined to the Network  To gather this information we will query Node and table events They both relate each other through NodeId field Next query shows how to find all the “ACCEPTED” events relate to a node Node is selected using its EUI64 and not the short address because short address can be reused by the coordinator and the same short address may be assigned to different devices; however EUI64 is unique  SELECT Frame * FROM Frame Event Node WHERE Node idNode = Event NodeId AND Event frameid =idframe AND Node EUI64 =X'4154504C33360001' AND Event event = 3  Also we could query the different short address assigned to a node in this log To do so we need to gather information from the challenge:  SELECT Distinct(Data) FROM Event Node WHERE Node idNode = Event NodeId AND Node EUI64 =X'4154504C33360001' AND Event event = 2  We can be interested in knowing when those join events happened:  SELECT Frame * FROM Frame Event Node WHERE Node idNode = Event NodeId AND Event FrameId = Frame idFrame AND Node EUI64 =X'4154504C33360001' AND Event event = 2 Or simply: SELECT idFrame TimeStamp FROM Frame Event Node WHERE Node idNode = Event NodeId AND Event FrameId = Frame idFrame AND Node EUI64 =X'4154504C33360001' AND Event event = 2  ",
							" Last Data Communication with a Node  In this case we will need to join information from Frame and MeshHeader tables Mesh Header contains information based on short address first we need to find out the short address assigned to a node as shown before  SELECT * FROM Frame MeshHeader WHERE idframe=MeshHeader_idframe and ((OriginatorAddress = X'0005' and DestinationAddress = X'0000') OR (OriginatorAddress = X'0000' and DestinationAddress = X'0005'))  This statement queries all frames that have a Mesh Header where origin or destination is the selected node If it is needed only the last frame then it is needed to add the “ORDER BY idFrame DESC” clause and LIMIT the search to one row:  SELECT * FROM Frame MeshHeader WHERE idframe=MeshHeader_idframe and ((OriginatorAddress = X'0005' and DestinationAddress = X'0000') OR (OriginatorAddress = X'0000' and DestinationAddress = X'0005')) ORDER BY idframe DESC LIMIT 1  Mesh Header can contain addresses in the form EUI64 therefore the field has a type of BLOB To select by these fields data must by entered in hexadecimal format: X’----’   It is possible to add results from different select statements to get for example all messages for a node including route request/responses:  SELECT Frame * FROM FRAME MeshHeader where idframe = MeshHeader_idframe and ((OriginatorAddress = X'0005' and DestinationAddress = X'0000') OR (OriginatorAddress = X'0000' and DestinationAddress = X'0005')) UNION SELECT Frame * FROM Frame RREQ WHERE (RREQ Originator = 5 OR RREQ Destination = 5) and RREQ RREQ_idFrame = Frame idFrame UNION SELECT Frame * FROM Frame RREP WHERE (RREP Originator = 5 OR RREP Destination = 5) and RREP RREP_idFrame = Frame idFrame  ",
							" Last Path Update for a Device  Select all LoadNG protocol messages in this log:  SELECT * FROM Frame WHERE (CmdType 16383) = 4096 OR (CmdType 16383) = 4097 OR (CmdType 16383) = 4098  Or select last path responses for a single node:  SELECT * FROM Frame PREP WHERE Frame idFrame = PREP PREP_idframe and PREP Originator=3 ORDER BY idFrame DESC LIMIT 1  As opposed to MeshHeader table PREP only contains short address information therefore filter for Originator field is simply an integer  Paths are stored in two tables: LoadNG_ForwardPaths and LoadNG_ReversePaths Both tables are linked to Frame/PREP tables by a foreign key To retrieve the forward Path for a Frame we need to join three tables like:  SELECT LOADng_ForwardPaths * FROM LOADng_ForwardPaths WHERE ForwardPaths_idFrame = (SELECT idFrame FROM Frame PREP WHERE Frame idFrame = PREP PREP_idframe and PREP Originator=3 ORDER BY idFrame DESC LIMIT 1)  Equivalently the reverse path statement will be:  SELECT * FROM LOADng_ReversePaths WHERE ReversePaths_idFrame = (SELECT idFrame FROM Frame PREP WHERE Frame idFrame = PREP PREP_idframe and PREP Originator=3 ORDER BY idFrame DESC LIMIT 1)  If we need the full path (forward and reverse) in one selection it is possible to execute a union of both selects:  SELECT LOADng_ForwardPaths * FROM LOADng_ForwardPaths WHERE ForwardPaths_idFrame = (SELECT idFrame FROM Frame PREP WHERE Frame idFrame = PREP PREP_idframe and PREP Originator=3 ORDER BY idFrame DESC LIMIT 1) UNION SELECT * FROM LOADng_ReversePaths WHERE ReversePaths_idFrame = (SELECT idFrame FROM Frame PREP WHERE Frame idFrame = PREP PREP_idframe and PREP Originator=3 ORDER BY idFrame DESC LIMIT 1)  ",
							" Appendix C PRIMEv1 3 Use Case Examples  The PLC Sniffer has been developed to monitor data traffic on power line networks It requires a hardware probe device physically connected to the powerline to snoop This hardware device will send the packet sent on the network through a serial link or a TCP/IP connection to a PC host running this software  In the next points we will analyze some PRIME application examples logged with the PLC Sniffer Tool  ",
							" SN Registration Request  The diagram for the registration process is the following:      In our sniffer capture window it is easy to identify the same process shown above The next image shows the registration process with the 3 frames involved    In order to obtain more details you could go to the packet view It is possible to find the type of messages and associate them with the previous diagram:   Frame 26:    Frame 27:    Frame 28:     ",
							" SN Connection Establishment  This is the diagram that appears in the PRIME specification 1 3 6 showing the connection establishment process initiated by a Service Node It shows how the Service Node sends a connection request to the Base Node via another switch   Connection Establishment Initiated by a Service Node    The sniffer capture according to the above PRIME specification diagram is the following:    The other sniffer capture shown below shows the connection establishment process initiated by a Service Node but in this case there is not any intermediate switch so there are only 2 devices involved: the Base Node and the terminal or Service Node The next image shows the connection establishment process with the 2 frames involved:    In order to obtain more details if you go to the packet view it is possible to find the type of messages and associate them with the previous diagram (In this case is a 4-32 connection):   Frame 182:    Frame 183:     As the Negative field is equal to 0 it indicates that it is a connection opening When Negative field is equal to 1 it indicates that is a connection closing  ",
							" BN Disconnection  This is the diagram that appears in the PRIME specification 1 3 6 showing the disconnection process initiated by a Base Node It shows how the base node sends a disconnection request to the Service Node via another switch   Disconnection Initiated by the Base Node    The sniffer capture shown below shows the disconnection process initiated by a Base Node but in this case there is not any intermediate switch so there are only 2 devices involved: the Base Node and the terminal or Service Node The next image shows the disconnection process with the 2 frames involved:    In order to obtain more details if you go to the packet view it is possible to find the type of messages and associate them with the previous diagram (In this case is a 4-32 connection):   Frame 152:    Frame 153:     As the Negative field is equal to 1 it indicates that is a connection closing  ",
							" SN Promotion Process  This is the diagram that appears in the PRIME specification 1 3 6 showing the promotion process initiated by a Service Node It shows how the Service Node sends a promotion request to the Base Node via another switch   Promotion Process Initiated by a Service Node    The sniffer capture shown below shows the promotion process initiated by a Service Node but in this case there is not any intermediate switch so there are only 2 devices involved: the Base Node and the terminal or Service Node The next image shows the promotion process with the 5 frames involved    In order to obtain more details if you go to the packet view it is possible to find the type of messages and associate them with the previous diagram:   Frame 74:    Frame 122:    Frame 123:    Frame 124:    Frame 125:     ",
							" SN Registration Request through a Switch  This is the diagram that appears in the PRIME specification 1 3 6 showing the registration process initialized by a Service Node through its switch:   Registration Process Accepted    In our sniffer capture window it is easy to identify the same process shown above The next image shows the registration process with the 6 frames involved    In order to obtain more details if you go to the packet view it is possible to find the type of messages and associate them with the previous diagram:   Frame 192:    Frame 193:    Frame 194:    Frame 195:    Frame 196:    Frame 197:     ",
							" Demotion Process Initialized by the Base Node  This is the diagram that appears in the PRIME specification 1 3 6 showing the demotion process initiated by the Base Node It shows how the Base Node sends a demotion request to one switch via another switch   Demotion Process Initiated by the Base Node    The Base Node will send this demotion request to a switch when for example that switch does not have any terminal connected to it It has no sense having a switch without any terminal connected to it  The sniffer capture below shows the demotion process initiated by the Base Node but in this case there is not any intermediate switch so there are only 2 devices involved: the Base Node and the switch    In order to obtain more details if you go to the packet view it is possible to find the type of messages and associate them with the previous diagram:   Frame 781: Although the Pdu Type is PRO_REQ_B we know that is a demotion request because the parameter Negative is true That means that it is the contrary process of a promotion request    Frame 782: Although the Pdu Type is PRO_ACK we know that is a demotion ACK because the parameter Negative is true That means that it is the contrary process of a promotion ACK     ",
							" Data Transfer  This is a sniffer capture of data transfer between the data concentrator and one Service Node with a switch between them:    If we analyze a basic data transfer it is something like the following diagram:   ",
							" PHY Tester Tool  The Power Line Communication (PLC) Physical Layer (PHY) Tester has been developed to allow the user to test basic characteristics of physical layers of Microchip PLC products This tool is able to configure the different physical layers of each product with basic parameters such as modulation schemes transmission power baudrate etc in order to make the interchange of basic PLC messages possible  The tool has been structured similar to a wizard where each step allows the user to configure some parameters related to one aspect of the test This structure allows the user to configure the test to be performed and at the end of the wizard the test will start with the proper configuration chosen by the user  It should be kept in mind that in order to obtain repeatable results a physical test must be done under controlled condition; it is recommended to carry out the test in an isolated path free of other PLC messages or interferences that can introduce uncontrolled signals in the channel to be evaluated  PLC Frequency Band Configuration  The PHY Tester Tool application loads by default the configuration to use the default coupling stage of the evaluation kit (CENELEC-A for the ATPL360-EK and FCC + CENELEC-A Multiband for the PL460-EK) If other coupling configuration is required it can be easily modified in PLC_PHY module of the project graph in MPLAB Code Configurator:   Coupling Configuration in PLC_PHY Module    ",
							" Software Installation  To install the software execute the installation wizard provided The first window allows selecting between multi-user support and current user:   First Wizard Window    Next window is the welcome window and contains some advice about tool installation:   Welcome Window    The next window shows you the License Agreement:   License Agreement Window    Next select the components to install:   Select Components    And finally select the install location:   Select Folder    The wizard must complete without any other configuration:   Installation Completed    The installation procedure generates a desktop link and start menu entry Use either to start the tool In order to be able to connect to the Microchip PLC boards USB drivers are provided with this software Please be sure that these drivers are installed before using this tool  ",
							" General Operation  The first step is to plug the hardware device to the power line Then connect the USB cable to the host computer Now we are ready to start the PLC PHY Tester software using for example the link created on your desktop during the install process In order to work with PLC PHY Tester the hardware must be flashed with the PHY Tester tool embedded application  The PLC PHY Tester has been designed to work as a wizard commonly used by many desktop applications The wizard is structured in tabs that are shown and enabled as the user sets configurations specific for each tab and goes to the next tab by means of the proper button    Welcome Tab  The main window that appears as soon as the application is started shows a welcome message and asks the user to select the serial port where Microchip PLC Development Board has been connected   Starting Window    The user must select the proper port and baudrate to connect and then press the “Connect” button As soon as the button is pressed the button text changes to “connecting” triggering a process of board identification; after few seconds the button text changes to “Disconnect” which means that the identification process has finished A new tab (Product Information) appears on the wizard and the “Next” button is enabled allowing the user to advance to the following step of the configuration In case of error please check the FW of the board and configuration of the serial connection    Product Information Tab  As soon as the user presses the Next button in the Welcome tab a new tab is shown:   Product Information Tab      The Product Information tab shows basic board information and also asks the user to configure the board as transmitter or receiver  The information shown is related to the physical layer implemented in the firmware of the board:  Product ID: Shows a text string identifying the Microchip PLC product (platform)  Model ID: Is a 16-bits unsigned integer that identifies the model of the board  Firmware ID: Is a 32-bits unsigned integer that identifies the physical layer firmware version running on the board   The next tab depends on transmission or reception test selection For reception tests “Reception Parameters” and “Rx Test Parameters” tabs are added; for transmission tests “Transmission Parameters” and “Tx Test Parameters” tabs are added Finally independently of the kind of test selected two more tabs are added: “Configuration Summary” and “Test Execution” All of these tabs are disabled at this point; as the user navigates through the wizard with the Next and Prev buttons the tabs become enabled    Reception Parameters for G3-PLC PHY Layer   Reception Parameters Tab for G3-PLC PHY Layer    This tab allows the user to configure all parameters related with the reception of frames Configurable parameters are as follows:  Tone-Mask: it allows to suppress the energy of carriers as G3-PLC specification defines An array of booleans is used to define the tone mask The length of array depends on bandplan: (CENELEC-A = 36; FCC = 72; ARIB = 54) 1 means carrier disabled and 0 means carrier enabled It is important to configure the same value for Tone-Mask both in transmission board as well as in reception board otherwise communication will fail  Tonal Noise Adaptation: The PHY layer is able to detect tonal noise and configure some input filters in order to cancel this noise The user can select:  Automatic Configuration: Hardware is performing noise captures every fixed interval (configurable see “G3-PLC FW Manual” ) After each capture the hardware selects the proper filtering for the detected noise (if any) User can configure to only perform the noise captures when hardware is not receiving (only available for ATPL250A/SAM4CP16C platforms) This option is activated by means of the “Delay Noise capture after correct reception” check box  Manual Configuration: In this mode the hardware only performs noise analysis when the user presses “Search and Adapt to Noise” The user can also configure the hardware to configure notch filter to certain frequency by means of the “Adapt to Target Frequency” Finally the user can disable noise adaptation using the “Disable Noise Filtering” option   The “Perform EVM and SNR Test” option changes message and interval of reception in order to make a test that evaluates the PHY layer performance In test execution tab some extra columns are added in order to obtain more information about performance of the PHY layer For more information check application note “PLC PHY Performance Validation”     Rx Test Parameters Tab  This tab allows configuration of the reception test parameters These parameters are the amount of expected messages to be received and the time interval from message to message (receiver instance will wait for this time prior to consider message is missed) These parameters are used just for test statistic results Unlike the previous one this tab is common for all the Microchip PLC protocols The following figure shows the tab layout:   Rx Test Parameters Tab      Transmission Parameters for G3-PLC PHY Layer   Transmission Parameters Tab for G3-PLC PHY Layer    This tab allows the user to configure all parameters related with the transmission of G3-PLC PHY frames Configurable parameters are the following:  Modulation Scheme: Allows configuration of differential or coherent modulation scheme  Modulation Type: Allows selection between BPSK QPSK 8PSK and robust BPSK  Tone Map: Allows disabling sub-bands (groups of tones) and the format depends on the selected bandplan Each band is activated or deactivated setting to ‘1’ or ‘0’ the corresponding bit in the hex array The different sub-bands are ordered in the hex array from least significant bit (lower frequency sub-band) to most significant bit (higher frequency sub-band) For example in CENELEC-A bandplan (6 sub-bands) 0x01 represent a tone map where only the lower sub-band is active as well as 0x20 is the tone map corresponding to a tone map where only higher sub-band is active  Reed Solomon 2 nd Block: Only available for FCC bandplan it allows to introduce a second RS block as defined in the G3-PLC specification  Tx Power: Allows to decrease the transmission power in 3dB steps  Pre-emphasis: Allows to decrease the transmission power in steps of 3 dB to each sub-band  Transmission Mode: Configures the output stage depending on the line impedance seen by the board  Tone-Mask: it allows to suppress the energy of carriers as defined in the G3-PLC specification An array of booleans is used to define the tone mask The array length depends on the bandplan: (CENELEC-A = 36; FCC = 72; ARIB = 54) 1 means carrier disabled and 0 means carrier enabled  Perform EVM and SNR Test: Selecting this option changes the message and interval of transmission in order to make a test that evaluates the PHY layer performance For more information check application note “PLC PHY Performance Validation”     Tx Test Parameters Tab  This tab is very similar to the Rx Test Parameters tab The “Message” parameter allows configuration of the content of the message to be transmitted in ASCII characters the “Time Interval” parameter defines the interval of time measured in milliseconds between the transmissions of two messages (This time interval indicates the time between the beginnings of two frames) Finally the “Number of Frames” parameter allows configuration of the number of messages to be transmitted As in the Rx Test Parameter Tab this tab is independent of PHY layer  IMPORTANT: 10ms drifts in the transmission and reception times may appear due to the application running on a non-real time operating system  IMPORTANT: A \"Time Interval\" shorter than 70 milliseconds may not work properly due to PC OS and USB connection Please use the PHY TX console firmware example to transmit messages with shorter time interval   Tx Test Parameters Tab      Configuration Summary Tab  This is the last tab in the wizard before starting the execution of the test This tab shows a table where all the configuration parameters are listed that have been configured along the wizard The “Next” button has been substituted with a “Start Test” button that allows starting the message transmission or reception   Configuration Summary Tab of a Transmission Test      Test Execution Tab  This is the tab shown while the test is being executed; it shows the transmission or reception of each message in form of a table The following figures show examples of this tab for transmission and a reception tests:  Both views (Tx and Rx) show tables representing different information depending on test type (transmission/reception) When the test is finished or is cancelled a final report is shown at the bottom of the tab  This tab will provide additional information about signal quality in case of selecting \"Performing EVM and SNR Test\" check-box in the \"Reception Parameters\" tab  The user can copy the information included in the corresponding table to the clipboard by clicking on the \"Copy Table\" button This tab is only able to hold the information of the last 10000 frames; the user can choose a bigger number of frames to be transmitted/received but only the last 10000 frames will be available    Reception Test Results   Execution Tab for G3-PLC PHY Layer Rx Test    Information included in the table is as follows:  Frame #: Indicates the received frame number  Modulation Type: Indicates the type of modulation: BPSK QPSK 8PSK or BPSK_ROBO  Modulation Scheme: Indicates if modulation scheme is differential or coherent  Tone Map: Indicates active sub-bands in the frame  RSSI (dBuV): Indicates the strength of the received signal in dBuV  LQI (dB): Link Quality Indicator (See G3-PLC specification for more information)  Data: Is the received info in ASCII format  Rx Interval: Is the interval of time between the reception of the current frame and the previous one  Payload Integrity: Shows if the content of the frame is correct or not   After all frames have been received or the test has been cancelled a text box with information about the test will be shown at the bottom of the tab First of all test timestamps are shown; this information is measured by the PC application After that there is a section called Frame Error information that shows information about received frames and possible errors Fields shown in this section are:  Total Frames Received: Shows the number of frames detected not taking into account if the frame has errors  Total Frames Bad FCH CRC: Shows the number of frames in which the header CRC is not valid These frames are discarded by the firmware and are not reported in the application  Total Frames Bad RS LEN: Frames that RS block is not able to correct are discarded by the firmware  Total Exception Errors: Other kinds of errors in the reception chain  Total Frames Bad Payload: Shows the number of frames where the content of the payload is not what it is supposed to be  Total Frames Received OK: Shows the number of frames received with the correct content     Transmission Test Results   Execution Tab for G3-PLC PHY Layer in Tx Test    There are eight columns that show the following information:  Frame #: Indicates the number of frames transmitted It is useful to track the test progress  Tx Result: Indicates the result of the transmission If an error occurs a descriptive text will appear  RMS_Calc: This number is related with the impedance detected in the power line; it is used by the PHY layer to determine the transmission mode  Modulation Scheme: Indicates if modulation scheme is differential or coherent  Modulation Type: Indicates the type of modulation: BPSK QPSK 8PSK or BPSK_ROBO  Tone Map: Indicates active sub-bands in the frame  Data: Shows the message received in ASCII format  Tx Interval: Represents the time interval between the current frame and the previous one   After all frames have been transmitted a text box with information about the test will appear at the bottom of the tab  Test timestamps are provided; this information is measured by the PC application After that there is a section of information called Frame Error information that shows information about transmitted frames and possible errors Finally another section shows a summary of the transmission test; apart from known transmission parameters other parameters are shown:  Frame Duration: Is the duration in millisecond of the frame  Tx Mean Interval: Is the average interval between transmissions calculated from top table data  Effective Baudrate (Peak): Is the effective baudrate if frames were transmitted consecutively calculated as follows:           Message length in Bytes x  8      Frame Duration           Effective Baudrate (Real): Is the effective baudrate calculated as follows:           Message length in Bytes x  8      Tx mean interval           Raw Baudrate (Peak): Is the baudrate taking into account all headers and redundancies:           Num Symbols FCH*Carriers FCH*Bits per carrier FCH  +  Num Symbols Payload*Carriers Payload*Bits per carrier Payload      Frame Duration           Raw Baudrate (Real): Is the baudrate taking into account all headers and redundancies calculated as follows:           Num Symbols FCH*Carriers FCH*Bits per carrier FCH  +  Num Symbols Payload*Carriers Payload*Bits per carrier Payload      Tx mean interval           Channel Usage : Is the percentage of channel that has been used calculated as follows:           Frame Duration      Tx mean interval              ",
							" Test Execution Tab  This is the tab shown while the test is being executed; it shows the transmission or reception of each message in form of a table The following figures show examples of this tab for transmission and a reception tests:  Both views (Tx and Rx) show tables representing different information depending on test type (transmission/reception) When the test is finished or is cancelled a final report is shown at the bottom of the tab  This tab will provide additional information about signal quality in case of selecting \"Performing EVM and SNR Test\" check-box in the \"Reception Parameters\" tab  The user can copy the information included in the corresponding table to the clipboard by clicking on the \"Copy Table\" button This tab is only able to hold the information of the last 10000 frames; the user can choose a bigger number of frames to be transmitted/received but only the last 10000 frames will be available  Transmission Test Results   Execution Tab for G3-PLC PHY Layer in Tx Test    There are eight columns that show the following information:  Frame #: Indicates the number of frames transmitted It is useful to track the test progress  Tx Result: Indicates the result of the transmission If an error occurs a descriptive text will appear  RMS_Calc: This number is related with the impedance detected in the power line; it is used by the PHY layer to determine the transmission mode  Modulation Scheme: Indicates if modulation scheme is differential or coherent  Modulation Type: Indicates the type of modulation: BPSK QPSK 8PSK or BPSK_ROBO  Tone Map: Indicates active sub-bands in the frame  Data: Shows the message received in ASCII format  Tx Interval: Represents the time interval between the current frame and the previous one   After all frames have been transmitted a text box with information about the test will appear at the bottom of the tab  Test timestamps are provided; this information is measured by the PC application After that there is a section of information called Frame Error information that shows information about transmitted frames and possible errors Finally another section shows a summary of the transmission test; apart from known transmission parameters other parameters are shown:  Frame Duration: Is the duration in millisecond of the frame  Tx Mean Interval: Is the average interval between transmissions calculated from top table data  Effective Baudrate (Peak): Is the effective baudrate if frames were transmitted consecutively calculated as follows:           Message length in Bytes x  8      Frame Duration           Effective Baudrate (Real): Is the effective baudrate calculated as follows:           Message length in Bytes x  8      Tx mean interval           Raw Baudrate (Peak): Is the baudrate taking into account all headers and redundancies:           Num Symbols FCH*Carriers FCH*Bits per carrier FCH  +  Num Symbols Payload*Carriers Payload*Bits per carrier Payload      Frame Duration           Raw Baudrate (Real): Is the baudrate taking into account all headers and redundancies calculated as follows:           Num Symbols FCH*Carriers FCH*Bits per carrier FCH  +  Num Symbols Payload*Carriers Payload*Bits per carrier Payload      Tx mean interval           Channel Usage : Is the percentage of channel that has been used calculated as follows:           Frame Duration      Tx mean interval            Reception Test Results   Execution Tab for G3-PLC PHY Layer Rx Test    Information included in the table is as follows:  Frame #: Indicates the received frame number  Modulation Type: Indicates the type of modulation: BPSK QPSK 8PSK or BPSK_ROBO  Modulation Scheme: Indicates if modulation scheme is differential or coherent  Tone Map: Indicates active sub-bands in the frame  RSSI (dBuV): Indicates the strength of the received signal in dBuV  LQI (dB): Link Quality Indicator (See G3-PLC specification for more information)  Data: Is the received info in ASCII format  Rx Interval: Is the interval of time between the reception of the current frame and the previous one  Payload Integrity: Shows if the content of the frame is correct or not   After all frames have been received or the test has been cancelled a text box with information about the test will be shown at the bottom of the tab First of all test timestamps are shown; this information is measured by the PC application After that there is a section called Frame Error information that shows information about received frames and possible errors Fields shown in this section are:  Total Frames Received: Shows the number of frames detected not taking into account if the frame has errors  Total Frames Bad FCH CRC: Shows the number of frames in which the header CRC is not valid These frames are discarded by the firmware and are not reported in the application  Total Frames Bad RS LEN: Frames that RS block is not able to correct are discarded by the firmware  Total Exception Errors: Other kinds of errors in the reception chain  Total Frames Bad Payload: Shows the number of frames where the content of the payload is not what it is supposed to be  Total Frames Received OK: Shows the number of frames received with the correct content   ",
							" PHY TX Console  Because of the timing restrictions in the connection with the PC the PLC PHY Tester tool may present limitations in applications or tests that require a very short time interval between consecutive frame transmissions  The PHY Tx Test Console is an application example that demonstrates the complete performance of the Microchip G3-PLC PHY Layer avoiding timing limitations in the PC host That way users can perform more specific PHY tests (e g short time interval between consecutive frames)  The PHY Tx Test Console application offers an interface to the user by means of a command console In this console users can configure several transmission parameters such as modulation frame data length and time interval between frames   Tx Console Menu    The example provided uses the console UART as a serial interface configured through a certain UART or USB (depending on platform) at 115200 bps by default  Serial Interface Configuration    ",
							" MACrt PLC Go  MACrt PLC Go is Microchip’s example to get started quickly with Power Line Communications (PLC) MACrt PLC Go implements a basic application example of low data rate PLC (up to 200 of kbps) using OFDM modulation that supports point to point and multi-point communications accessing through Microchip G3-PLC MAC realtime (MACrt) implementation (G3_MAC_RT)  G3_MAC_RT PLC includes some of the advanced features available in the G3-PLC MAC simplifying the communication process between devices:  TX/RX API Params Interface: configures/stores the transmission and reception parameters (G3-PLC specific)  TX/RX API Data Interface compatible with standard MAC 802 15 4  Automatic Medium access capabilities: CSMA/CA retransmissions inter-frame spacing  Automatic Link parameters selection between devices handled through TMR mechanism  ARQ Enabled/Disabled according to provided MAC 802 15 4 Data Header  Automatic segmentation and reassembly  Addressing according to provided MAC 802 15 4 Data Header: allows point to point (unicast short/extended address) or multipoint (broadcast) communication  Frame Reception filtering capabilities by own MAC address  Duplicated frames filtering  Sniffering capabilities   MACrt PLC Go runs a chat application between two or more end points using Microchip PLC modem boards The end points in this example are PCs which are connected via serial interface (USB UART) to Microchip evaluation boards acting as PLC modems Any end point can transmit a message which is received by the destination (one device or all) The application example allows end points to configure several PLC parameters as PLC Band (in case of using a Microchip evaluation board that supports several bands of transmission)     Microchip PLC solution is flexible and provides designs optimized for several frequency sub-bands below 500 kHz Adopters can decide which band to use based on application’s restrictions and /or communications performance which can be affected by different types of noise sources in the PLC channel  ",
							" Application Example  Microchip MACrt PLC Go application is a point to point or multi-point chat application built on top of the MACrt layer Microchip implementation of G3-PLC protocol (G3_MAC_RT module)  Note that mac_rt_plc_and_go application example can be used with Microchip G3-PLC stack version included on MPLAB Harmony in any Microchip platforms implementing PL360/PL460 device as PLC modem  This application example assumes that a host device (a PC for example) is connected through a serial interface (USB UART) to a Microchip evaluation kit acting as a PLC modem  The figure below provides an example of the minimum hardware and firmware resources required to run MACrt PLC Go   PLC Go Block Diagram    The MACrt PLC Go application interchanges data with the PC through a serial port using a terminal emulator (see figure MACrt PLC Go console where terminal emulator TeraTerm is used) The settings of the serial port are: 921600 bps 8 data bits no parity 1 stop bit and flow control  When the serial port is opened the MACrt PLC Go application shows in the console some information about the hardware platform and the firmware running and it waits for a message to be sent The message is sent when a carriage return character is received or the maximum length of the PLC data message is reached If the user sends the ASCII character 0x13 (‘CTRL+S’) a configuration menu is shown  The MACrt PLC Go application allows to:   Configure source/destination address  Configure the TX/RX channel  Configure the Ack Request Mechanism   In addition the application provides some information about the transmitted messages (length of the message) and the received messages (Modulation type and LQI) which can be displayed by means of a terminal emulator in the PC   MACrt PLC Go Console   In the example project the app_plc c file contains:   PLC initialization and configuration functions  Handlers for received messages transmission and events   The app_console c file contains the chat application which communicates with the PC using the serial port  ",
							" Initialization  In the code of the example project mac_rt_plc_and_go the initialization of the G3_MAC_RT module is performed during the first states of the state machine running in the PLC task APP_PLC_Tasks()   G3_MAC_RT Hardware Initialization  The first states of the state machine configure and initialize different parts of the G3_MAC_RT hardware:  APP_PLC_STATE_IDLE initializes the variables related to the coupling stage  APP_PLC_STATE_INIT opens the PLC driver to load the G3_MAC_RT binary   The MACrt PLC Go application loads by default the configuration to use the default coupling stage of the evaluation kit (FCC + CENELEC-A Multiband for the PL460-EK) If other coupling configuration is required it can be easily modified in G3_MAC_RT module of the project graph in MPLAB Code Configurator:   Coupling Configuration in PLC_MACrt Module   Callback setting  The state APP_PLC_STATE_OPEN configures the PLC callbacks to manage the different events coming from the G3_MAC_RT applies the initial configuration and enables the PVDD monitor required to transmit with the G3_MAC_RT  The callbacks to manage different events are:   Data_indication event is managed by APP_PLC_DataIndCb() function to process all the PLC messages received  Data_confirm event is managed by APP_PLC_DataCfmCb() function to process the results of sending a PLC message  Exception events are managed by APP_PLC_ExceptionCb() function  PLC disable sleep mode event is managed by APP_PLC_SleepModeDisableCb() function to restart the configuration  PVDD monitor events are managed by APP_PLC_PVDDMonitorCb() function   case APP_PLC_STATE_OPEN: { /* Check PLC transceiver */ if (DRV_G3_MACRT_Status(DRV_G3_MACRT_INDEX_0) == SYS_STATUS_READY) { /* Configure PLC callbacks */ DRV_PLC_PHY_ExceptionCallbackRegister(appPlc drvPl360Handle APP_PLC_ExceptionCb); DRV_PLC_PHY_DataCfmCallbackRegister(appPlc drvPl360Handle APP_PLC_DataCfmCb); DRV_PLC_PHY_DataIndCallbackRegister(appPlc drvPl360Handle APP_PLC_DataIndCb); DRV_PLC_PHY_SleepDisableCallbackRegister(appPlc drvPl360Handle APP_PLC_SleepModeDisableCb); /* Apply PLC initial configuration */ APP_PLC_SetInitialConfiguration(); /* Enable PLC Transmission */ DRV_G3_MACRT_EnableTX(appPlc drvPl360Handle true);  G3_MAC_RT enabling  When the callbacks are set the G3_MAC_RT binary is already loaded from flash memory and its integrity is checked but transmission is not allowed until the PVDD Monitor Service starts:  /* Enable PLC PVDD Monitor Service: ADC channel 0 */ SRV_PVDDMON_RegisterCallback(APP_PLC_PVDDMonitorCb 0); SRV_PVDDMON_Start(SRV_PVDDMON_CMP_MODE_OUT);  ",
							" Transmission  In the MACrt PLC Go application to transmit a message it is only needed to call the function APP_PLC_SendData() passing as parameters the pointer to the data buffer and the data length The data buffer corresponds with the characters received through the console  G3_MAC_RT module sets everything concerning specific implementation for G3-PLC respecting the MAC 802 15 4 frame format so any message transmitted by the G3_MAC_RT module requires receiving a standard MAC 802 15 4 frame where the MAC header configures the parameters in the transmission at MAC level  The standard MAC 802 15 4 frame check sequence is also calculated by the G3_MAC_RT module If some specific behavior (MAC or PHY) needs to be modified (like force the modulation force a tonemap or modify the power transmission) or obtained it must be done through get/set PIBs primitives ( DRV_G3_MACRT_PIBGet() / DRV_G3_MACRT_PIBSet() ) The PIB list are detailed by the enumeration type definitions MAC_RT_PIB and MAC_RT_PHY_PIB   The MACrt PLC Go application configures the default values of the MAC 802 15 4 header frame updating the contents of the corresponding structure MAC_RT_HEADER (defined in drv_g3_macrt_comm h file) during the initialization stage in the function APP_PLC_SetInitialConfiguration() in the state APP_PLC_STATE_OPEN    The function APP_PLC_SetInitialConfiguration() configures additionally some transmission parameters related to physical layer like the transmision and impedance detection modes using the DRV_G3_MACRT_PIBSet() primitve with the corresponding PIBs  Once the transmission is configured the function APP_PLC_SendData() prepares the data to be sent by PLC storing the data in the transmission buffer ( appPlcTx pTxFrame ) When all the information is in the transmission buffer the function DRV_G3_MACRT_TxRequest() sends the PLC message  After sending the message to be transmitted to the G3_MAC_RT module a TX data confirm event is triggered indicating the result of the transmission This event is managed by the APP_PLC_DataCfmCb() callback function This callback receives as parameter a data structure of type MAC_RT_TX_CFM_OBJ    Structure MAC_RT_HEADER and the corresponding elements  // ***************************************************************************** /* G3-PLC MAC RT header Summary This struct includes information related to MAC header Remarks: For more information please refer to G3-PLC Specification */ typedef struct __attribute__((packed aligned(1))) { /* Frame Control Information */ MAC_RT_FRAME_CONTROL frameControl; /* Sequence Number */ uint8_t sequenceNumber; /* Destination PAN Identifier */ uint16_t destinationPAN; /* Destination Address */ MAC_RT_ADDRESS destinationAddress; /* Source PAN Identifier */ uint16_t sourcePAN; /* Source Address */ MAC_RT_ADDRESS sourceAddress; /* Security Header */ MAC_RT_AUX_SECURITY_HEADER securityHeader; } MAC_RT_HEADER; // ***************************************************************************** /* G3-PLC Frame Control information Summary This struct includes information related to frame control Remarks: For more information please refer to G3-PLC Specification */ typedef struct { /* Frame Type */ uint16_t frameType : 3; /* Security Enable */ uint16_t securityEnabled : 1; /* Frame pending */ uint16_t framePending : 1; /* Ack Request */ uint16_t ackRequest : 1; /* PAN ID Compression */ uint16_t panIdCompression : 1; /* Reserved */ uint16_t reserved : 3; /* Destination Addressing Mode */ uint16_t destAddressingMode : 2; /* Frame Version */ uint16_t frameVersion : 2; /* Source Addressing Mode */ uint16_t srcAddressingMode : 2; } MAC_RT_FRAME_CONTROL; // ***************************************************************************** /* G3-PLC MAC RT Auxiliary Security Header Summary This struct includes information related to auxiliary security header Remarks: For more information please refer to G3-PLC Specification */ typedef struct { /* Security Level */ uint8_t securityLevel : 3; /* Key Identifier Mode */ uint8_t keyIdentifierMode : 2; /* Reserved */ uint8_t reserved : 3; /* Frame Counter */ uint32_t frameCounter; /* Key Identifier */ uint8_t keyIdentifier; } MAC_RT_AUX_SECURITY_HEADER;   Structure MAC_RT_TX_CFM_OBJ  // ***************************************************************************** /* G3 MAC RT Transmission result Summary This struct includes a transmission result and timestamp Remarks: None */ typedef struct { /* MAC RT Status */ MAC_RT_STATUS status; /* Flag to indicate Timestamp should be updated */ bool updateTimestamp; } MAC_RT_TX_CFM_OBJ;  The event returns one of the following transmission result status: // ***************************************************************************** /* G3 MAC RT Status Summary The list of status values Remarks: None */ typedef enum { MAC_RT_STATUS_SUCCESS = 0x00 MAC_RT_STATUS_CHANNEL_ACCESS_FAILURE = 0xE1 MAC_RT_STATUS_DENIED = 0xE2 MAC_RT_STATUS_INVALID_INDEX = 0xF9 MAC_RT_STATUS_INVALID_PARAMETER = 0xE8 MAC_RT_STATUS_NO_ACK = 0xE9 MAC_RT_STATUS_READ_ONLY = 0xFB MAC_RT_STATUS_TRANSACTION_OVERFLOW = 0xF1 MAC_RT_STATUS_UNSUPPORTED_ATTRIBUTE = 0xF4 } MAC_RT_STATUS;   ",
							" Reception  In a normal situation when a PLC message is received it is processed by the G3_MAC_RT module so that if the Destination PANid is not the Broadcast PANid 0xFFFF) and is different than the PANid configured by the application the callback function run is the DRV_G3_MACRT_COMM_STATUS_IND_CALLBACK where the only parameter is a pointer to the MAC frame without the length It’s not configured on this example  Any other frame addressed to the PANid and any of the addresses (short or extended) configured up to the host application in two steps:  Reception of parameters: specific to G3-PLC MAC implementation which callback is set to APP_PLC_RxParamsIndCb() and where the information is stored on a MAC_RT_RX_PARAMETERS_OBJ structure pointer  Reception of standard 802 15 4 MAC data frame: handled by callback APP_PLC_DataIndCb() where the information (a common 802 15 4 MAC data frame) is stored in the buffer pointer pData with length length   The APP_PLC_DataIndCb() callback function doesn’t check any FCS so all the received frames has been validated previously on the G3_MAC_RT  For any frame addressed to the device the G3_MAC_RT handles the acknowledge if it is requested on the MAC header ( ackRequest bit on the MAC_RT_FRAME_CONTROL structure) and the reception of duplicated frames  On this application the content of the MAC frame as well as the modulation and the LQI is shown on the console  The MAC_RT_RX_PARAMETERS_OBJ structure definition is defined on drv_g3_macrt_comm h :  // ***************************************************************************** /* G3 MAC RT Reception parameters Summary This struct includes information to describe any new received message Remarks: None */ typedef struct __attribute__((packed aligned(1))) { /* High Priority */ bool highPriority; /* PDU Link Quality */ uint8_t pduLinkQuality; /* Phase Differential */ uint8_t phaseDifferential; /* Modulation Type */ MAC_RT_MOD_TYPE modType; /* Modulation Scheme */ MAC_RT_MOD_SCHEME modScheme; /* Tone map */ MAC_RT_TONE_MAP toneMap; /* Tone map Response */ MAC_RT_TONE_MAP_RSP_DATA toneMapRsp; } MAC_RT_RX_PARAMETERS_OBJ;  The structure contains all the G3-PLC MAC specific information available about the received message The fields of the structure are:        highPriority  Indicates if the frame was sent in the High Priority    pduLinkQuality  PDU Link Quality    phaseDifferential  Phase Differential    modType  Modulation Type    modScheme  Modulation Scheme    toneMap  Tone Map    toneMapRsp  Tone Map Response      Related symbolic constants affecting modType parameter:       MAC_RT_MOD_TYPE  Description      MAC_RT_MOD_ROBUST  ROBO-4 Modulation    MAC_RT_MOD_BPSK  BPSK Modulation    MAC_RT_MOD_QPSK  QPSK Modulation    MAC_RT_MOD_8PSK  8PSK Modulation    MAC_RT_MOD_16QAM  16QAM Modulation      Related symbolic constants affecting modScheme parameter:       MAC_RT_MOD_SCHEME  Description      MAC_RT_MOD_SCHEME_DIFFERENTIAL  Differential Modulation    MAC_RT_MOD_SCHEME_COHERENT  Coherent Modulation      "];

